[{"C:\\Users\\lyq__\\Desktop\\senki\\src\\index.tsx":"1","C:\\Users\\lyq__\\Desktop\\senki\\src\\app\\index.tsx":"2","C:\\Users\\lyq__\\Desktop\\senki\\src\\app\\routes.ts":"3","C:\\Users\\lyq__\\Desktop\\senki\\src\\layout\\index.ts":"4","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\index.ts":"5","C:\\Users\\lyq__\\Desktop\\senki\\src\\layout\\Footer\\index.tsx":"6","C:\\Users\\lyq__\\Desktop\\senki\\src\\layout\\Header\\index.tsx":"7","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\NotFound\\index.tsx":"8","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\VisualEditor\\index.tsx":"9","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\AlgoSimulate\\index.tsx":"10","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\Welcome\\index.tsx":"11","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\CodeDesc.tsx":"12","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\AlgoSimulate\\AlgoBox.tsx":"13","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\index.js":"14","C:\\Users\\lyq__\\Desktop\\senki\\src\\components\\index.ts":"15","C:\\Users\\lyq__\\Desktop\\senki\\src\\util\\index.ts":"16","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\index.ts":"17","C:\\Users\\lyq__\\Desktop\\senki\\src\\components\\NormalStyle.ts":"18","C:\\Users\\lyq__\\Desktop\\senki\\src\\util\\date.ts":"19","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\CodeControl.ts":"20","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\bubble.ts":"21","C:\\Users\\lyq__\\Desktop\\senki\\src\\components\\ControlTrack.tsx":"22","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\makeAlgoSource.ts":"23","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\object.js":"24","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\structure\\SenkiLinkedNode.js":"25","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\structure\\SenkiArray.js":"26","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\scheduler.js":"27","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\components\\Histogram.js":"28","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\components\\ForestPlot.js":"29","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\anim.js":"30","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\shape.js":"31","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\util.js":"32","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\selection.ts":"33","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\BreadcrumbNav.tsx":"34","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\quick.ts":"35","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\merge.ts":"36","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\shell.ts":"37","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\babel\\plugin-senki-wait.js":"38","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\Sort\\index.tsx":"39","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\index.ts":"40","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\Tree\\index.tsx":"41","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\tree\\inorderTraversal.ts":"42","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\tree\\minBinaryHeap.ts":"43"},{"size":197,"mtime":1611143005232,"results":"44","hashOfConfig":"45"},{"size":929,"mtime":1611894100475,"results":"46","hashOfConfig":"45"},{"size":833,"mtime":1612064173106,"results":"47","hashOfConfig":"45"},{"size":94,"mtime":1611149830611,"results":"48","hashOfConfig":"45"},{"size":281,"mtime":1612064155355,"results":"49","hashOfConfig":"45"},{"size":509,"mtime":1611894100487,"results":"50","hashOfConfig":"45"},{"size":3324,"mtime":1611995176379,"results":"51","hashOfConfig":"45"},{"size":1187,"mtime":1612096193705,"results":"52","hashOfConfig":"45"},{"size":12126,"mtime":1612092234355,"results":"53","hashOfConfig":"45"},{"size":2630,"mtime":1612075714618,"results":"54","hashOfConfig":"45"},{"size":2742,"mtime":1611994725366,"results":"55","hashOfConfig":"45"},{"size":2066,"mtime":1611939036654,"results":"56","hashOfConfig":"45"},{"size":2829,"mtime":1612075703069,"results":"57","hashOfConfig":"45"},{"size":382,"mtime":1611853125431,"results":"58","hashOfConfig":"45"},{"size":120,"mtime":1611668943476,"results":"59","hashOfConfig":"45"},{"size":202,"mtime":1611931659594,"results":"60","hashOfConfig":"45"},{"size":610,"mtime":1612086473912,"results":"61","hashOfConfig":"45"},{"size":319,"mtime":1611669224401,"results":"62","hashOfConfig":"45"},{"size":2277,"mtime":1611894100536,"results":"63","hashOfConfig":"45"},{"size":3049,"mtime":1612096850475,"results":"64","hashOfConfig":"45"},{"size":1473,"mtime":1612066261396,"results":"65","hashOfConfig":"45"},{"size":2780,"mtime":1612092160717,"results":"66","hashOfConfig":"45"},{"size":268,"mtime":1611753353465,"results":"67","hashOfConfig":"45"},{"size":3110,"mtime":1611888336392,"results":"68","hashOfConfig":"45"},{"size":4352,"mtime":1612085683209,"results":"69","hashOfConfig":"45"},{"size":3651,"mtime":1612021634364,"results":"70","hashOfConfig":"45"},{"size":651,"mtime":1611881573634,"results":"71","hashOfConfig":"45"},{"size":9467,"mtime":1612079389439,"results":"72","hashOfConfig":"45"},{"size":8847,"mtime":1612085114940,"results":"73","hashOfConfig":"45"},{"size":4610,"mtime":1611755185761,"results":"74","hashOfConfig":"45"},{"size":4815,"mtime":1611853851760,"results":"75","hashOfConfig":"45"},{"size":957,"mtime":1611489783889,"results":"76","hashOfConfig":"45"},{"size":1645,"mtime":1612061785104,"results":"77","hashOfConfig":"45"},{"size":824,"mtime":1611931299637,"results":"78","hashOfConfig":"45"},{"size":2736,"mtime":1612061786647,"results":"79","hashOfConfig":"45"},{"size":2520,"mtime":1612061789042,"results":"80","hashOfConfig":"45"},{"size":2328,"mtime":1612061783294,"results":"81","hashOfConfig":"45"},{"size":3186,"mtime":1612015952625,"results":"82","hashOfConfig":"45"},{"size":6847,"mtime":1612093987268,"results":"83","hashOfConfig":"45"},{"size":201,"mtime":1612064095943,"results":"84","hashOfConfig":"45"},{"size":6678,"mtime":1612093977557,"results":"85","hashOfConfig":"45"},{"size":4077,"mtime":1612094282037,"results":"86","hashOfConfig":"45"},{"size":5478,"mtime":1612094380615,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"tj6rwr",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"120"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\lyq__\\Desktop\\senki\\src\\index.tsx",[],["182","183"],"C:\\Users\\lyq__\\Desktop\\senki\\src\\app\\index.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\app\\routes.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\layout\\index.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\index.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\layout\\Footer\\index.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\layout\\Header\\index.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\NotFound\\index.tsx",["184"],"import { makeStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NotFound() {\r\n  const c = useStyle();\r\n  return (\r\n    <div className={c.content}>\r\n      <img\r\n        src=\"https://img.alicdn.com/tfs/TB1txw7bNrI8KJjy0FpXXb5hVXa-260-260.png\"\r\n        className={c.img}\r\n        alt=\"not found\"\r\n      />\r\n      <div>\r\n        <h3>抱歉，你访问的路径不存在</h3>\r\n        <p className={c.p}>\r\n          您要找的页面没有找到，请返回\r\n          <Link to=\"/\">\r\n            <a className={c.a}>首页</a>\r\n          </Link>\r\n          继续浏览\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n\r\nconst useStyle = makeStyles({\r\n  content: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    minHeight: 500,\r\n    alignItems: \"center\",\r\n  },\r\n  img: {\r\n    marginRight: 50,\r\n  },\r\n  p: {\r\n    color: \"#666\",\r\n    fontSize: 16,\r\n    lineHeight: 20,\r\n    marginBottom: 7,\r\n  },\r\n  a: {\r\n    fontSize: 16,\r\n    lineHeight: 20,\r\n    \"&:-webkit-any-link\": {\r\n      color: \"-webkit-link\",\r\n      cursor: \"pointer\",\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\VisualEditor\\index.tsx",["185"],"import {\r\n  makeStyles,\r\n  Button,\r\n  FormControlLabel,\r\n  Switch,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport CodeMirror from \"@uiw/react-codemirror\";\r\nimport { Drawer, Radio } from \"antd\";\r\nimport { RadioChangeEvent } from \"antd/lib/radio\";\r\nimport \"codemirror/keymap/sublime\";\r\nimport \"codemirror/theme/eclipse.css\";\r\nimport \"codemirror/theme/neo.css\";\r\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\r\nimport { ControlTrack, useNormalStyles } from \"../../components\";\r\nimport { CodeContext, CodeControl } from \"../../lib/algo_desc\";\r\nimport pulgin from \"../../lib/babel/plugin-senki-wait\";\r\nimport { Scene, SenkiArray, SenkiLinkedNode } from \"../../lib/senki\";\r\nimport { C } from \"../../util\";\r\n\r\nlet scene: Scene;\r\nlet codeControl: CodeControl;\r\nlet tempTask: undefined | (() => void); // 保存断点继续的执行函数\r\n\r\nconst clearTempTask = () => (tempTask = undefined);\r\n\r\nconst Mode = [\r\n  {\r\n    title: \"数组\",\r\n    className: \"SenkiArray\",\r\n    header: 'import { SenkiArray } from \"senki\"\\n\\n',\r\n  },\r\n  {\r\n    title: \"树节点\",\r\n    className: \"SenkiLinkedNode\",\r\n    header: 'import { SenkiLinkedNode } from \"senki\"\\n\\n',\r\n  },\r\n];\r\n\r\nlet histroyCodeStr = localStorage.getItem(\"code\");\r\n\r\nconst histroyCode: string[] = histroyCodeStr\r\n  ? JSON.parse(histroyCodeStr)\r\n  : Mode.map((m) => m.header);\r\n\r\nfunction VisualEditor() {\r\n  const classes = useStyles();\r\n  const { flexRow } = useNormalStyles();\r\n\r\n  const [tip, setTip] = useState(\"\");\r\n  const [codeInfo, setCodeInfo] = useState([-1, -1]);\r\n  const [error, setError] = useState<string>();\r\n  const [mode, setMode] = useState(0);\r\n  const [format, setFormat] = useState(true);\r\n  const [code, setCode] = useState(histroyCode);\r\n  const [snackbar, setSnackbar] = useState(false);\r\n  const [status, setStatus] = useState<\"stop\" | \"play\" | \"finish\">(\"stop\");\r\n\r\n  const editor = useRef<CodeMirror>(null);\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n  const statusRef = useRef(status);\r\n  statusRef.current = status; // 没办法，为了在函数里引用，只能干这种愚蠢操作。\r\n  const codeInfoRef = useRef<number[]>();\r\n  codeInfoRef.current = codeInfo;\r\n\r\n  const handleBeforeChange = (_: any, change: any) => {\r\n    if (change.origin === \"setValue\") return;\r\n    if (change.from.line === 0 || change.from.line === 1) {\r\n      change.cancel();\r\n    }\r\n  };\r\n\r\n  const handleChangeMode = (e: RadioChangeEvent) => {\r\n    code[mode] = editor.current?.editor.getValue();\r\n    setMode(e.target.value);\r\n    clearTempTask();\r\n    setStatus(\"stop\");\r\n  };\r\n\r\n  const handlePublishCode = () => {\r\n    setSnackbar(true);\r\n  };\r\n\r\n  const handleSeveCode = () => {\r\n    code[mode] = editor.current?.editor.getValue();\r\n    localStorage.setItem(\"code\", JSON.stringify(code));\r\n    setTip(\"保存成功\");\r\n  };\r\n\r\n  const handleRunCode = () => {\r\n    code[mode] = editor.current?.editor.getValue();\r\n    localStorage.setItem(\"code\", JSON.stringify(code));\r\n\r\n    let { fakeCode, error, realCode } = makeCodeSource(code[mode], format);\r\n\r\n    createNewCodeControl(realCode, statusRef, setStatus, setError, setCodeInfo);\r\n\r\n    if (error) return setError(error);\r\n\r\n    if (format) {\r\n      code[mode] = Mode[mode].header + fakeCode;\r\n      editor.current?.editor.setValue(code[mode]);\r\n      localStorage.setItem(\"code\", JSON.stringify(code));\r\n    }\r\n\r\n    setStatus(\"play\");\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    if (!codeControl || codeControl.status !== \"running\")\r\n      return setTip(\"请先运行代码！\");\r\n    if (tempTask) tempTask();\r\n    setStatus(\"play\");\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    codeControl.destroy(); // 一定要记得销毁\r\n\r\n    let { error, realCode } = makeCodeSource(code[mode], format);\r\n\r\n    createNewCodeControl(realCode, statusRef, setStatus, setError, setCodeInfo);\r\n\r\n    if (error) return setError(error);\r\n\r\n    setStatus(\"play\");\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setStatus(\"stop\");\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (tempTask) tempTask();\r\n  };\r\n\r\n  const handleChangeSpeed = () => {};\r\n\r\n  useLayoutEffect(() => {\r\n    scene = new Scene(canvas.current!);\r\n    SenkiArray.config.scene = scene;\r\n    SenkiArray.config.width = scene.width;\r\n    SenkiArray.config.height = scene.height;\r\n    SenkiLinkedNode.setCanvasDimensions({\r\n      width: scene.width,\r\n      height: scene.height,\r\n    });\r\n    scene.add(SenkiLinkedNode.senkiForest);\r\n  }, [canvas]);\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        autoHideDuration={2000}\r\n        onClose={() => setSnackbar(false)}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}\r\n        open={snackbar}\r\n        message=\"功能建设中...\"\r\n      />\r\n      <Snackbar open={!!tip} autoHideDuration={6000} onClose={() => setTip(\"\")}>\r\n        <Alert severity=\"info\">{tip}</Alert>\r\n      </Snackbar>\r\n      <div className={C(flexRow, classes.control)}>\r\n        <div className={flexRow}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={handlePublishCode}\r\n          >\r\n            发布代码\r\n          </Button>\r\n          <Button variant=\"outlined\" color=\"primary\" onClick={handleSeveCode}>\r\n            保存代码\r\n          </Button>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleRunCode}>\r\n            执行代码\r\n          </Button>\r\n        </div>\r\n        <div className={flexRow}>\r\n          <ControlTrack\r\n            status={status}\r\n            speed={400}\r\n            light\r\n            onPlay={handlePlay}\r\n            onStop={handleStop}\r\n            onRestart={handleRestart}\r\n            onChangeSpeed={handleChangeSpeed}\r\n            onNext={handleNext}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className={classes.codeAndCanvasContainer}>\r\n        <div className={classes.codeEditor}>\r\n          <div className={classes.bar}>\r\n            <span className={classes.typeTitle}>\r\n              语言: <span className={classes.type}>JavaScript</span>\r\n            </span>\r\n            <FormControlLabel\r\n              onChange={(_, v) => setFormat(v)}\r\n              control={<Switch defaultChecked color=\"primary\" />}\r\n              label=\"保存时自动格式化代码\"\r\n              labelPlacement=\"end\"\r\n            />\r\n          </div>\r\n          <div className={classes.code}>\r\n            <CodeMirror\r\n              ref={editor}\r\n              value={code[mode]}\r\n              onBeforeChange={handleBeforeChange}\r\n              onRenderLine={(it: CodeMirror, line: any, ele: HTMLElement) => {\r\n                let no = line.lineNo();\r\n                let info = codeInfoRef.current;\r\n                if (info![0] === -1) return;\r\n                if (no >= info![0] + 1 && no <= info![1] + 1) {\r\n                  ele.style.backgroundColor = \"#ff000055\";\r\n                }\r\n              }}\r\n              options={{\r\n                theme: \"neo\",\r\n                keyMap: \"sublime\",\r\n                mode: \"js\",\r\n                matchBrackets: true,\r\n              }}\r\n            />\r\n            <Drawer\r\n              title={\r\n                <span style={{ color: \"#f44336\" }}>\r\n                  出错啦！请确认代码无误！\r\n                </span>\r\n              }\r\n              placement=\"bottom\"\r\n              closable\r\n              visible={!!error}\r\n              mask={false}\r\n              getContainer={false}\r\n              onClose={() => setError(\"\")}\r\n              style={{ position: \"absolute\" }}\r\n            >\r\n              <pre>{error?.toString()}</pre>\r\n            </Drawer>\r\n          </div>\r\n        </div>\r\n        <div className={classes.codeCanvas}>\r\n          <div className={classes.ani}>\r\n            <Radio.Group\r\n              value={mode}\r\n              buttonStyle=\"outline\"\r\n              onChange={handleChangeMode}\r\n            >\r\n              {Mode.map((m, idx) => (\r\n                <Radio.Button key={idx} value={idx}>\r\n                  {m.title}\r\n                </Radio.Button>\r\n              ))}\r\n            </Radio.Group>\r\n            <span className={classes.state}>\r\n              {status === \"stop\"\r\n                ? \"暂无正在执行的代码\"\r\n                : status === \"play\"\r\n                ? \"正在执行动画\"\r\n                : \"代码执行结束\"}\r\n            </span>\r\n          </div>\r\n          <canvas ref={canvas} className={classes.canvasProp}></canvas>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VisualEditor;\r\n\r\nfunction makeCodeSource(code: string, format: boolean) {\r\n  code = code.split(\"\\n\").slice(2).join(\"\\n\").trim();\r\n  let error = \"\",\r\n    fakeCode = code,\r\n    realCode = \"\";\r\n\r\n  try {\r\n    if (format) fakeCode = Babel.transform(code, {}).code;\r\n\r\n    realCode = Babel.transform(fakeCode, {\r\n      plugins: [pulgin],\r\n    }).code;\r\n  } catch (err) {\r\n    error = err;\r\n  }\r\n\r\n  return { fakeCode, error, realCode };\r\n}\r\n\r\nconst createNewCodeControl = (\r\n  realCode: string,\r\n  statusRef: React.MutableRefObject<\"stop\" | \"play\" | \"finish\">,\r\n  setStatus: (bool: \"stop\" | \"play\" | \"finish\") => void,\r\n  setError: React.Dispatch<React.SetStateAction<string | undefined>>,\r\n  setCodeInfo: React.Dispatch<React.SetStateAction<number[]>>\r\n) => {\r\n  if (codeControl) codeControl.destroy();\r\n\r\n  codeControl = new CodeControl(realCode);\r\n\r\n  const handleWait = ({ info, resolve }: CodeContext) => {\r\n    setCodeInfo(info.line);\r\n    // 确定动画结束了再进行下一步\r\n    const tryToNext = () => {\r\n      if (statusRef.current === \"play\") {\r\n        if (scene.isAnimAllOver()) resolve();\r\n        else setTimeout(tryToNext, 100);\r\n      } else tempTask = resolve;\r\n    };\r\n\r\n    setTimeout(tryToNext, 500);\r\n  };\r\n\r\n  const handleEnd = () => {\r\n    setStatus(\"finish\");\r\n    setCodeInfo([-1, -1]);\r\n  };\r\n\r\n  const handleDestroy = () => {\r\n    scene.removeAllChild();\r\n    SenkiLinkedNode.senkiForest.destroyTree();\r\n    SenkiLinkedNode.resetSenkiForest();\r\n    scene.add(SenkiLinkedNode.senkiForest);\r\n  };\r\n\r\n  const handleError = (err: string) => {\r\n    setError(err);\r\n  };\r\n\r\n  codeControl.on(\"wait\", handleWait);\r\n  codeControl.on(\"end\", handleEnd);\r\n  codeControl.on(\"destroy\", handleDestroy);\r\n  codeControl.on(\"error\", handleError);\r\n\r\n  codeControl.start();\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  dataFuntion: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  modeFunction: {},\r\n  codeAndCanvasContainer: {\r\n    boxSizing: \"border-box\",\r\n    height: \"75vh\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  codeEditor: {\r\n    position: \"relative\",\r\n    boxSizing: \"border-box\",\r\n    width: \"50vw\",\r\n    height: \"100%\",\r\n    background: \"#eeeeee55\",\r\n    borderTop: \"1px solid #eeeeee\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    overflow: \"hidden\",\r\n  },\r\n  codeCanvas: {\r\n    position: \"relative\",\r\n    boxSizing: \"border-box\",\r\n    width: \"50vw\",\r\n    height: \"100%\",\r\n    background: \"#eeeeee55\",\r\n    borderTop: \"1px solid #eeeeee\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    overflow: \"hidden\",\r\n  },\r\n  canvasProp: {\r\n    flex: 1,\r\n    background: \"white\",\r\n    width: \"100%\",\r\n    margin: \"0px 10px 10px 10px\",\r\n    borderRadius: \"5px\",\r\n  },\r\n  ani: {\r\n    fontSize: \"1rem\",\r\n    height: \"40px\",\r\n    color: \"#aeb4b7\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    width: \"90%\",\r\n  },\r\n  control: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    margin: \"10px 0px 10px 0px\",\r\n    \"& > div\": {\r\n      flex: 1,\r\n      marginLeft: 50,\r\n      marginRight: 50,\r\n    },\r\n  },\r\n  bar: {\r\n    padding: \"5px\",\r\n    height: \"40px\",\r\n    color: \"#aeb4b7\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    width: \"90%\",\r\n    fontSize: \"1rem\",\r\n  },\r\n  typeTitle: {},\r\n  state: {},\r\n  type: {},\r\n  code: {\r\n    height: \"100%\",\r\n    padding: \"0px 10px 10px 10px\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\AlgoSimulate\\index.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\Welcome\\index.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\CodeDesc.tsx",[],["186","187"],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\AlgoSimulate\\AlgoBox.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\index.js",[],["188","189"],"C:\\Users\\lyq__\\Desktop\\senki\\src\\components\\index.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\util\\index.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\index.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\components\\NormalStyle.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\util\\date.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\CodeControl.ts",["190"],"import \"../senki/index.js\";\r\n\r\nclass MicroEvent<EventType extends string> {\r\n  _events!: {\r\n    [key in string]: ((...args: any[]) => void)[];\r\n  };\r\n\r\n  on(event: EventType, fct: (...args: any[]) => void) {\r\n    this._events = this._events || {};\r\n    this._events[event] = this._events[event] || [];\r\n    this._events[event].push(fct);\r\n  }\r\n\r\n  offAll(event: EventType) {\r\n    this._events = this._events || {};\r\n    delete this._events[event];\r\n  }\r\n\r\n  off(event: EventType, fct: (...args: any[]) => void) {\r\n    this._events = this._events || {};\r\n    if (event in this._events === false) return;\r\n    let idx = this._events[event].indexOf(fct)\r\n    if (idx !== -1) this._events[event].splice(idx, 1);\r\n  }\r\n\r\n  emit(event: EventType, ...args: any[]) {\r\n    this._events = this._events || {};\r\n    if (event in this._events === false) return;\r\n    for (var i = 0; i < this._events[event].length; i++)\r\n      this._events[event][i].apply(this, args);\r\n  }\r\n}\r\n\r\nconst CodeControlPool: CodeControl[] = [];\r\n\r\ntype CodeControlEvent = \"end\" | \"begin\" | \"wait\" | \"error\" | \"destroy\";\r\n\r\ntype CodeInfo = { line: number[]; desc: number };\r\n\r\nexport type CodeContext = {\r\n  info: CodeInfo;\r\n  resolve: (value?: any) => void;\r\n  reject: (reason?: any) => void;\r\n};\r\n\r\nexport default class CodeControl extends MicroEvent<CodeControlEvent> {\r\n  static count = 0;\r\n  executableFunction: () => Promise<void>;\r\n\r\n  static saveContext(count: number, context: CodeContext) {\r\n    const instance = CodeControlPool[count];\r\n    if (instance) instance.saveCodeContext(context);\r\n    else {\r\n      console.warn(\"CodeControl \" + count + \" not Found，try to end the task.\");\r\n      context?.reject(\"The entity has been deleted.\");\r\n    }\r\n  }\r\n\r\n  count = CodeControl.count++;\r\n\r\n  codeContext?: CodeContext;\r\n\r\n  status: \"running\" | \"idle\" | \"error\" = \"idle\";\r\n\r\n  _breakpointFunctionDeclaration = `\r\n  function wait(info) {\r\n    return new Promise((resolve, reject) => {\r\n      // console.log(${this.count})\r\n      CodeControl.saveContext(${this.count}, { info, resolve, reject });\r\n    });\r\n  };\r\n  `;\r\n\r\n  constructor(source: string) {\r\n    super();\r\n\r\n    CodeControlPool.push(this);\r\n\r\n    this.executableFunction = Function(`\r\n    ${this._breakpointFunctionDeclaration}\r\n    return async function () {\r\n      ${source}\r\n    };\r\n    `)();\r\n  }\r\n\r\n  start() {\r\n    this.emit(\"begin\");\r\n    this.status = \"running\";\r\n    this.executableFunction()\r\n      .catch((err: any) => {\r\n        this.status = \"error\";\r\n        this.emit(\"error\", err);\r\n        throw err\r\n      })\r\n      .finally(() => {\r\n        this.status = \"idle\";\r\n        this.emit(\"end\");\r\n      });\r\n  }\r\n\r\n  saveCodeContext(context: CodeContext) {\r\n    this.codeContext = context;\r\n    this.emit(\"wait\", context);\r\n  }\r\n\r\n  destroy() {\r\n    delete CodeControlPool[this.count];\r\n    this.offAll(\"end\");\r\n    this.offAll(\"begin\");\r\n    this.offAll(\"wait\");\r\n    this.offAll(\"error\");\r\n    this.emit(\"destroy\");\r\n    this.offAll(\"destroy\");\r\n  }\r\n}\r\n\r\n(window as any).CodeControl = CodeControl;\r\n","C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\bubble.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\components\\ControlTrack.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\makeAlgoSource.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\object.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\structure\\SenkiLinkedNode.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\structure\\SenkiArray.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\scheduler.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\components\\Histogram.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\components\\ForestPlot.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\anim.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\shape.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\senki\\base\\util.js",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\selection.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\BreadcrumbNav.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\quick.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\merge.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\sort\\shell.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\babel\\plugin-senki-wait.js",["191"],"export default function ({ types: t }) {\r\n  const findLine = (path, node) => {\r\n    if (node && node.loc) return [node.loc.start.line, node.loc.end.line];\r\n\r\n    if (!path) return -1;\r\n\r\n    if (path.node.loc)\r\n      return [path.node.loc.start.line, path.node.loc.end.line];\r\n    else return findLine(path.parentPath);\r\n  };\r\n\r\n  const createWaitNode = ([lineStart = -1, lineEnd = -1], descNum = -1) => {\r\n    return t.awaitExpression(\r\n      t.callExpression(t.identifier(\"wait\"), [\r\n        t.objectExpression([\r\n          t.objectProperty(\r\n            t.identifier(\"line\"),\r\n            t.arrayExpression([\r\n              t.numericLiteral(lineStart),\r\n              t.numericLiteral(lineEnd),\r\n            ])\r\n          ),\r\n          t.objectProperty(t.identifier(\"desc\"), t.numericLiteral(descNum)),\r\n        ]),\r\n      ])\r\n    );\r\n  };\r\n\r\n  return {\r\n    name: \"senki-wait\",\r\n    visitor: {\r\n      Program(path) {\r\n        let len = path.node.body.length;\r\n        for (let i = 0; i < len; i++) {\r\n          path.node.body.splice(\r\n            i * 2 + 1,\r\n            0,\r\n            createWaitNode(findLine(path, path.node.body[i * 2]))\r\n          );\r\n        }\r\n      },\r\n      ArrowFunctionExpression(path) {\r\n        if (t.isExpression(path.node.body)) {\r\n          path\r\n            .get(\"body\")\r\n            .replaceWith(t.blockStatement([t.returnStatement(path.node.body)]));\r\n        }\r\n      },\r\n      Statement(path) {\r\n        if (t.isBlockStatement(path.node)) return;\r\n        if (t.isBreakStatement(path.node)) return;\r\n\r\n        const parentNode = path.parentPath.node;\r\n\r\n        if (t.isWithStatement(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n\r\n        if (t.isIfStatement(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n\r\n        if (t.isWhileStatement(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n\r\n        if (t.isDoWhileStatement(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n\r\n        if (t.isForStatement(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n\r\n        if (t.isForInStatement(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n\r\n        if (t.isSwitchCase(parentNode)) {\r\n          path.replaceWith(t.blockStatement([path.node]));\r\n        }\r\n      },\r\n      BlockStatement(path) {\r\n        let len = path.node.body.length;\r\n        for (let i = 0; i < len; i++) {\r\n          path.node.body.splice(\r\n            i * 2,\r\n            0,\r\n            createWaitNode(findLine(path, path.node.body[i * 2 - 1]))\r\n          );\r\n        }\r\n        if (!t.isReturnStatement(path.node.body[len * 2 - 1]))\r\n          path.node.body.splice(\r\n            len * 2,\r\n            0,\r\n            createWaitNode(findLine(path, path.node.body[len * 2 - 1]))\r\n          );\r\n      },\r\n      Function(path) {\r\n        path.node.async = true;\r\n      },\r\n      CallExpression(path) {\r\n        if (!t.isAwaitExpression(path.parentPath.node))\r\n          path.replaceWith(t.awaitExpression(path.node))\r\n      }\r\n    },\r\n  };\r\n};\r\n","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\Sort\\index.tsx",["192"],"import React, { useLayoutEffect, useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Tag, Input, Button } from \"antd\";\r\nimport { ControlTrack, useNormalStyles } from \"../../../components\";\r\nimport { C } from \"../../../util\";\r\nimport CodeDesc from \"../CodeDesc\";\r\nimport { Scene, SenkiArray } from \"../../../lib/senki\";\r\nimport {\r\n  CodeContext,\r\n  CodeControl,\r\n  makeBubbleAlgoSource,\r\n  makeMergeAlgoSource,\r\n  makeQuickSortAlgoSource,\r\n  makeSelectionAlgoSource,\r\n  makeShellAlgoSource,\r\n} from \"../../../lib/algo_desc\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport BreadcrumbNav from \"../BreadcrumbNav\";\r\n\r\nlet scene: Scene;\r\nlet codeControl: CodeControl;\r\nlet makeAlgoSource = makeBubbleAlgoSource;\r\nlet fakeCode: string = \"\",\r\n  desc: string[] = [],\r\n  realCode: string = \"\";\r\n\r\nlet tempTask: () => void | undefined; // 保存断点继续的执行函数\r\n\r\nconst SimulateDetail = () => {\r\n  const classes = useStyles();\r\n  const { flexRow, flexCol } = useNormalStyles();\r\n  const [reviseArray, setReviseArray] = useState();\r\n  const location = useLocation();\r\n  const [status, setStatus] = useState<\"stop\" | \"play\" | \"finish\">(\"stop\");\r\n  const [codeInfo, setCodeInfo] = useState({ line: [-1, -1], desc: -1 });\r\n\r\n  const statusRef = useRef(status);\r\n  statusRef.current = status; // 没办法，为了在闭包函数里引用，只能干这种愚蠢操作。\r\n  const canvas = useRef<HTMLCanvasElement>(null);\r\n\r\n  const createNewCodeControl = () => {\r\n    codeControl = new CodeControl(realCode);\r\n\r\n    const handleWait = ({ info, resolve }: CodeContext) => {\r\n      setCodeInfo(info);\r\n\r\n      // 确定动画结束了再进行下一步\r\n      const tryToNext = () => {\r\n        if (statusRef.current === \"play\") {\r\n          if (scene.isAnimAllOver()) resolve();\r\n          else setTimeout(tryToNext, 100);\r\n        } else tempTask = resolve;\r\n      };\r\n\r\n      setTimeout(tryToNext, 500);\r\n    };\r\n\r\n    const handleEnd = () => {\r\n      setStatus(\"finish\");\r\n      setCodeInfo({ line: [-1, -1], desc: -1 });\r\n    };\r\n\r\n    const handleDestroy = () => {\r\n      scene.removeAllChild();\r\n    };\r\n\r\n    codeControl.on(\"wait\", handleWait);\r\n    codeControl.on(\"end\", handleEnd);\r\n    codeControl.on(\"destroy\", handleDestroy);\r\n\r\n    codeControl.start();\r\n  };\r\n\r\n  const handlePlay = () => {\r\n    if (tempTask) tempTask();\r\n    setStatus(\"play\");\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    [fakeCode, desc, realCode] = makeAlgoSource(reviseArray);\r\n    codeControl.destroy(); // 一定要记得销毁\r\n    createNewCodeControl();\r\n    setStatus(\"play\");\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setStatus(\"stop\");\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (tempTask) tempTask();\r\n  };\r\n\r\n  const handleChangeSpeed = () => {};\r\n\r\n  const reviseArrayInputChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    try {\r\n      let data = JSON.parse(event.target.value);\r\n      setReviseArray(data);\r\n    } catch (err) {\r\n      setReviseArray(undefined);\r\n    }\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    scene = new Scene(canvas.current!);\r\n    SenkiArray.config.scene = scene;\r\n    SenkiArray.config.width = scene.width;\r\n    SenkiArray.config.height = scene.height;\r\n\r\n    let path = location.pathname;\r\n\r\n    if (/bubble/.test(path)) makeAlgoSource = makeBubbleAlgoSource;\r\n    if (/merge/.test(path)) makeAlgoSource = makeMergeAlgoSource;\r\n    if (/quick/.test(path)) makeAlgoSource = makeQuickSortAlgoSource;\r\n    if (/selection/.test(path)) makeAlgoSource = makeSelectionAlgoSource;\r\n    if (/shell/.test(path)) makeAlgoSource = makeShellAlgoSource;\r\n\r\n    [fakeCode, desc, realCode] = makeAlgoSource(reviseArray);\r\n\r\n    createNewCodeControl();\r\n  }, [canvas, location.pathname]);\r\n\r\n  return (\r\n    <div className={C(classes.container, flexCol)}>\r\n      <BreadcrumbNav />\r\n      <div className={C(classes.codeBox, flexRow)}>\r\n        <CodeDesc code={fakeCode} desc={desc} info={codeInfo} />\r\n        <canvas ref={canvas} className={classes.canvas}></canvas>\r\n      </div>\r\n      <div className={C(classes.operationArea, flexCol)}>\r\n        <div className={flexRow}>\r\n          <div className={classes.operationSingleArea}>\r\n            <div style={{ padding: 24 }}  className={classes.operationPart}>\r\n              <Link to=\"/simulatedetail/sort/bubble\">\r\n                <Tag color=\"magenta\">冒泡</Tag>\r\n              </Link>\r\n              <Link to=\"/simulatedetail/sort/merge\">\r\n                <Tag color=\"cyan\">归并</Tag>\r\n              </Link>\r\n              <Link to=\"/simulatedetail/sort/quick\">\r\n                <Tag color=\"geekblue\">快排</Tag>\r\n              </Link>\r\n              <Link to=\"/simulatedetail/sort/selection\">\r\n                <Tag color=\"purple\">选择</Tag>\r\n              </Link>\r\n              <Link to=\"/simulatedetail/sort/shell\">\r\n                <Tag color=\"green\">希尔</Tag>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className={classes.operationSingleArea}>\r\n            <div className={classes.operationPart}>\r\n              <div className={classes.reviseArrayInputButtonBox}>\r\n                <div className={classes.reviseArrayInput}>\r\n                  <Input\r\n                    placeholder=\"输入数组，例：[1,2,3,4,5]\"\r\n                    onChange={(event) => {\r\n                      reviseArrayInputChange(event);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Button onClick={handleRestart}>确认</Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <ControlTrack\r\n          status={status}\r\n          speed={400}\r\n          onPlay={handlePlay}\r\n          onStop={handleStop}\r\n          onRestart={handleRestart}\r\n          onChangeSpeed={handleChangeSpeed}\r\n          onNext={handleNext}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimulateDetail;\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    minHeight: \"calc(100vh - 60px)\",\r\n  },\r\n  breadNav: {\r\n    padding: 13,\r\n  },\r\n  codeBox: {\r\n    flex: 1,\r\n  },\r\n  canvas: {\r\n    flex: 1,\r\n    marginLeft: 50,\r\n    marginRight: 50,\r\n  },\r\n  operationArea: {\r\n    margin: 13,\r\n    height: \"20vh\",\r\n    backgroundColor: \"#2c303a\",\r\n  },\r\n  operationPart: {\r\n    marginTop: \"1%\",\r\n    marginBottom: \"1%\",\r\n    backgroundColor: \"white\",\r\n    padding: \"20px\",\r\n    borderRadius: \"5px\",\r\n  },\r\n  operationSingleArea: {\r\n    width: \"48%\",\r\n    height: \"100%\",\r\n    padding: \"0.5%\",\r\n  },\r\n  operationCode: {\r\n    backgroundColor: \"white\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  },\r\n  reviseArrayInputButtonBox: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  reviseArrayInput: {\r\n    width: \"90%\",\r\n    marginRight: \"5px\",\r\n  },\r\n});\r\n","C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\index.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\pages\\SimulateDetail\\Tree\\index.tsx",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\tree\\inorderTraversal.ts",[],"C:\\Users\\lyq__\\Desktop\\senki\\src\\lib\\algo_desc\\tree\\minBinaryHeap.ts",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":19,"column":13,"nodeType":"199","endLine":19,"endColumn":32},{"ruleId":"200","severity":1,"message":"201","line":56,"column":16,"nodeType":"202","messageId":"203","endLine":56,"endColumn":23},{"ruleId":"193","replacedBy":"204"},{"ruleId":"195","replacedBy":"205"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"206","severity":1,"message":"207","line":79,"column":31,"nodeType":"208","messageId":"209","endLine":84,"endColumn":7},{"ruleId":"210","severity":1,"message":"211","line":1,"column":1,"nodeType":"212","endLine":108,"endColumn":2},{"ruleId":"213","severity":1,"message":"214","line":124,"column":6,"nodeType":"215","endLine":124,"endColumn":33,"suggestions":"216"},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'setCode' is assigned a value but never used.","Identifier","unusedVar",["217"],["218"],"no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useLayoutEffect has a missing dependency: 'reviseArray'. Either include it or remove the dependency array.","ArrayExpression",["219"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},"Update the dependencies array to be: [canvas, location.pathname, reviseArray]",{"range":"222","text":"223"},[3637,3664],"[canvas, location.pathname, reviseArray]"]